// internal/service/user_service.go
package service

import (
	"context"
	"errors"
	"fmt"

	"github.com/P1punGorbach/backend/internal/auth"
	"github.com/P1punGorbach/backend/internal/models"
	"github.com/P1punGorbach/backend/internal/repository"
	"golang.org/x/crypto/bcrypt"
)

var (
	ErrUserAlreadyExists  = errors.New("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–æ–π –ø–æ—á—Ç–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
	ErrInvalidCredentials = errors.New("–Ω–µ–≤–µ—Ä–Ω–∞—è –ø–æ—á—Ç–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
)

type UserService struct {
	repo UserRepository // —Ç–≤–æ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
}

type UserRepository interface {
	Create(ctx context.Context, user *models.User) error
	GetByEmail(ctx context.Context, email string) (*models.User, error)
	GetByID(ctx context.Context, id int) (*models.User, *models.UserProfile, error)
	CreateProfile(ctx context.Context, userID int) error
	UpdateProfile(ctx context.Context, userID int, in models.UpdateProfileInput ) error
	ListAll(ctx context.Context) ([]models.User, error)
	Delete(ctx context.Context, id int) error
	// –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –Ω—É–∂–Ω—ã
}

func NewUserService(r *repository.UserRepo) *UserService {
	return &UserService{repo: r}
}

// RegisterInput ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
type RegisterInput struct {
	Email    string `json:"email" binding:"required,email"`
	Password string `json:"password" binding:"required,min=6"`
}
type AdminCreateUserInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	IsAdmin  bool   `json:"is_admin"`
}

// Register —Å–æ–∑–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ö–µ—à–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î
func (s *UserService) Register(ctx context.Context, in RegisterInput) (*models.User, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
	existingUser, err := s.repo.GetByEmail(ctx, in.Email)
	if err != nil && !errors.Is(err, repository.ErrNotFound) {
		return nil, err
	}
	if existingUser != nil {
		return nil, ErrUserAlreadyExists
	}

	hash, err := bcrypt.GenerateFromPassword([]byte(in.Password), bcrypt.DefaultCost)
	if err != nil {
		return nil, err
	}

	user := &models.User{
		Email:        in.Email,
		PasswordHash: string(hash),
	}

	if err := s.repo.Create(ctx, user); err != nil {
		return nil, err
	}
	fmt.Println("‚úÖ ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user.ID)
	// üîΩ –î–æ–±–∞–≤—å —ç—Ç–æ:
	if err := s.repo.CreateProfile(ctx, user.ID); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: %w", err)
	}

	return user, nil
}

type LoginInput struct {
	Email    string `json:"email"    binding:"required,email"`
	Password string `json:"password" binding:"required"`
}

func (s *UserService) Login(ctx context.Context, in LoginInput) (*models.User, string, error) {
	// –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
	user, err := s.repo.GetByEmail(ctx, in.Email)
	if err != nil {
		if errors.Is(err, repository.ErrNotFound) {
			return nil, "", ErrInvalidCredentials
		}
		return nil, "", err
	}

	// –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è
	if err := bcrypt.CompareHashAndPassword([]byte(user.PasswordHash), []byte(in.Password)); err != nil {
		return nil, "", ErrInvalidCredentials
	}
	token, err := auth.GenerateToken(user.ID)
	if err != nil {
		return nil, "", err
	}

	return user, token, nil
}
func (s *UserService) GetUserInfo(ctx context.Context, token string) (*models.User, *models.UserProfile, error) {

	userID, err := auth.ParseToken(token)
	if err != nil {
		fmt.Println("‚ùå ParseToken –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:", err)
		return nil, nil, err
	}
	user, profile, err := s.repo.GetByID(ctx, userID)
	if err != nil {
		return nil, nil, err
	}
	fmt.Println("‚úÖ –†–∞—Å–ø–∞—Ä—Å–∏–ª–∏ userID:", userID)
	return user, profile, nil
}
func (s *UserService) UpdateProfile(ctx context.Context, userID int, in models.UpdateProfileInput) error {
	return s.repo.UpdateProfile(ctx, userID, in)
}
func (s *UserService) ListAll(ctx context.Context) ([]models.User, error) {
	return s.repo.ListAll(ctx)
}
func (s *UserService) Delete(ctx context.Context, id int) error {
	return s.repo.Delete(ctx, id)
}
func (s *UserService) AdminCreateUser(ctx context.Context, input AdminCreateUserInput) (*models.User, error) {
	existing, err := s.repo.GetByEmail(ctx, input.Email)
	if err != nil && !errors.Is(err, repository.ErrNotFound) {
		return nil, err
	}
	if existing != nil {
		return nil, ErrUserAlreadyExists
	}

	hash, err := bcrypt.GenerateFromPassword([]byte(input.Password), bcrypt.DefaultCost)
	if err != nil {
		return nil, err
	}

	user := &models.User{
		Email:        input.Email,
		PasswordHash: string(hash),
		IsAdmin:      input.IsAdmin,
	}

	if err := s.repo.Create(ctx, user); err != nil {
		return nil, err
	}

	// —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π –ø—Ä–æ—Ñ–∏–ª—å
	if err := s.repo.CreateProfile(ctx, user.ID); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: %w", err)
	}

	return user, nil
}
