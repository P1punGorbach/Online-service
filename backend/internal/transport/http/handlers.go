// internal/transport/http/handler.go

package http

import (
	"database/sql"
	"fmt"
	"log"
	"net/http"
	"strconv"

	"github.com/P1punGorbach/backend/internal/auth"
	"github.com/P1punGorbach/backend/internal/models"
	"github.com/P1punGorbach/backend/internal/repository"
	"github.com/P1punGorbach/backend/internal/service"
	"github.com/gin-gonic/gin"
)

// Handler —Ö—Ä–∞–Ω–∏—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
type Handler struct {
	userSvc *service.UserService
	prodSvc *service.ProductService
}

// NewHandler —Å–æ–∑–¥–∞—ë—Ç —Ä–µ–ø–æ‚Üí—Å–µ—Ä–≤–∏—Å—ã
func NewHandler(db *sql.DB) *Handler {
	// user
	userRepo := repository.NewUserRepo(db)
	userSvc := service.NewUserService(userRepo)
	// products
	prodRepo := repository.NewProductRepo(db)
	prodSvc := service.NewProductService(prodRepo)

	return &Handler{
		userSvc: userSvc,
		prodSvc: prodSvc,
	}
}

// InitRoutes –≤–µ—à–∞–µ—Ç –í–°–ï —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–∞ Gin
func (h *Handler) InitRoutes() *gin.Engine {
	r := gin.Default()
	api := r.Group("/api")

	// —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
	api.POST("/register", h.Register)
	// –ª–æ–≥–∏–Ω
	api.POST("/login", h.Login)
	// —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
	api.GET("/products", h.ListProducts)

	api.GET("/user", middlewareAuth, h.ApiUserInfo)

	api.POST("/logout", h.Logout) // üëà –≤–æ—Ç –∑–¥–µ—Å—å

	api.POST("/user/update", middlewareAuth, h.UpdateUser)

	api.GET("/users", middlewareAuth, h.ListUsers)

	api.DELETE("/users/:id", middlewareAuth, h.DeleteUser)

	api.POST("/users", middlewareAuth, h.CreateUser)

	api.POST("/products", middlewareAuth, h.CreateProduct)

	return r
}

// –í—Ö–æ–¥–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã

type registerInput struct {
	Email           string `json:"email"    binding:"required,email"`
	Password        string `json:"password" binding:"required,min=6"`
	ConfirmPassword string `json:"confirmPassword"  binding:"required"`
}

type loginInput struct {
	Email    string `json:"email"    binding:"required,email"`
	Password string `json:"password" binding:"required"`
}
type ProductInput struct {
	Name         string   `json:"name"`
	CategoryID   int      `json:"categoryId"`
	BrandID      int      `json:"brandId"`
	Description  string   `json:"description"`
	GrowthMin    int      `json:"growthMin"`
	GrowthMax    int      `json:"growthMax"`
	WeightMin    int      `json:"weightMin"`
	WeightMax    int      `json:"weightMax"`
	PositionIDs  []int    `json:"positionIds"`
	BallSize     string   `json:"ballSize"`
	TopType      string   `json:"topType"`
	BottomType   string   `json:"bottomType"`
	AccessoryType string  `json:"accessoryType"`
	StoreLinks   []string `json:"storeLinks"`
}

// Register ‚Äî POST /api/register
func (h *Handler) Register(c *gin.Context) {
	var in registerInput
	if err := c.ShouldBindJSON(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"message": err.Error()})
		return
	}
	if in.Password != in.ConfirmPassword {
		c.JSON(http.StatusBadRequest, gin.H{"message": "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"})
		return
	}

	user, err := h.userSvc.Register(c.Request.Context(), service.RegisterInput{
		Email:    in.Email,
		Password: in.Password,
	})
	if err != nil {
		if err == service.ErrUserAlreadyExists {
			c.JSON(http.StatusConflict, gin.H{"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–æ–π –ø–æ—á—Ç–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"})
		} else {
			c.JSON(http.StatusInternalServerError, gin.H{"message": "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"})
		}
		return
	}

	c.JSON(http.StatusCreated, gin.H{
		"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
		"id":      user.ID,
		"email":   user.Email,
	})
}

// Login ‚Äî POST /api/login
func (h *Handler) Login(c *gin.Context) {
	var in loginInput
	if err := c.ShouldBindJSON(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"message": err.Error()})
		return
	}

	_, token, err := h.userSvc.Login(c.Request.Context(), service.LoginInput{
		Email:    in.Email,
		Password: in.Password})
	if err != nil {
		if err == service.ErrInvalidCredentials {
			c.JSON(http.StatusUnauthorized, gin.H{"message": "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å"})
		} else {
			c.JSON(http.StatusInternalServerError, gin.H{"message": "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"})
		}
		return
	}
	http.SetCookie(c.Writer, &http.Cookie{
		Name:     "token",
		Value:    token,
		Path:     "/",
		HttpOnly: true,
		Secure:   false, // true –µ—Å–ª–∏ HTTPS
		SameSite: http.SameSiteLaxMode,
		MaxAge:   3600, // 1 —á–∞—Å
	})

	c.JSON(http.StatusOK, gin.H{
		"message": "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω",
		"token":   token,
	})

}

// ListProducts ‚Äî GET /api/products
func (h *Handler) ListProducts(c *gin.Context) {
	list, err := h.prodSvc.ListProducts()
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"message": err.Error()})
		return
	}
	c.JSON(http.StatusOK, list)
}

func (h *Handler) ApiUserInfo(c *gin.Context) {
	cookie, err := c.Request.Cookie("token")
	if err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"message": "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞"})
		return
	}
	fmt.Println("‚úÖ –¢–æ–∫–µ–Ω –∏–∑ –∫—É–∫–∏:", cookie.Value)
	user, profile, err := h.userSvc.GetUserInfo(c.Request.Context(), cookie.Value)
	if err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err)
		c.JSON(http.StatusInternalServerError, gin.H{"message": err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"email":       user.Email,
		"name":        profile.Name,
		"height":      profile.HeightCm,
		"weight":      profile.WeightKg,
		"position":    profile.PositionName,
		"position_id": profile.PositionIndex,
		"is_admin":    user.IsAdmin,
	})
}
func middlewareAuth(c *gin.Context) {

	cookie, err := c.Request.Cookie("token")
	if err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"message": "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞"})
		return
	}
	userID, err := auth.ParseToken(cookie.Value)
	if err != nil {
		c.JSON(http.StatusUnauthorized, gin.H{"message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω"})
		return
	}
	c.Set("userID", userID)
	c.Next()
}
func (h *Handler) Logout(c *gin.Context) {
	http.SetCookie(c.Writer, &http.Cookie{
		Name:     "token",
		Value:    "",
		Path:     "/",
		MaxAge:   -1, // üëà —É–¥–∞–ª–µ–Ω–∏–µ –∫—É–∫–∏
		HttpOnly: true,
	})
	c.JSON(http.StatusOK, gin.H{"message": "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω"})
}
func (h *Handler) UpdateUser(c *gin.Context) {
	userID, ok := c.Get("userID")
	if !ok {
		c.JSON(http.StatusUnauthorized, gin.H{"message": "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"})
		return
	}

	var input models.UpdateProfileInput

	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"})
		return
	}

	err := h.userSvc.UpdateProfile(c.Request.Context(), userID.(int), input)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:", err)
		c.JSON(http.StatusInternalServerError, gin.H{"message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"})
		return
	}

	// –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	c.JSON(http.StatusOK, gin.H{
		"name":     input.Name,
		"email":    input.Email,
		"height":   input.Height,
		"weight":   input.Weight,
		"position": input.Position,
	})
}
func (h *Handler) ListUsers(c *gin.Context) {
	users, err := h.userSvc.ListAll(c.Request.Context())
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"message": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"})
		return
	}
	c.JSON(http.StatusOK, users)
}
func (h *Handler) DeleteUser(c *gin.Context) {
	idParam := c.Param("id")
	id, err := strconv.Atoi(idParam)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID"})
		return
	}

	err = h.userSvc.Delete(c.Request.Context(), id)
	if err != nil {
		if err == repository.ErrNotFound {
			c.JSON(http.StatusNotFound, gin.H{"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		} else {
			c.JSON(http.StatusInternalServerError, gin.H{"message": "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è"})
		}
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "–£–¥–∞–ª–µ–Ω–æ"})
}
func (h *Handler) CreateUser(c *gin.Context) {
	var in service.AdminCreateUserInput
	if err := c.ShouldBindJSON(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"})
		return
	}

	user, err := h.userSvc.AdminCreateUser(c.Request.Context(), in)
	if err != nil {
		if err == service.ErrUserAlreadyExists {
			c.JSON(http.StatusConflict, gin.H{"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"})
		} else {
			c.JSON(http.StatusInternalServerError, gin.H{"message": "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
		}
		return
	}

	c.JSON(http.StatusCreated, gin.H{
		"id":    user.ID,
		"email": user.Email,
	})
}
func (h *Handler) CreateProduct(c *gin.Context) {
	var in ProductInput
	if err := c.ShouldBindJSON(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
		return
	}

	err := h.prodSvc.CreateProduct(c.Request.Context(), in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞"})
		return
	}

	c.JSON(http.StatusCreated, gin.H{"message": "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"})
}

